syntax = "proto3";

package proto.services.network_service.v1;

import "proto/common/network/v1/network.proto";

message GetNetworkRequest {
    string network_id = 1;
}

message GetNetworkResponse {
    proto.common.network.v1.Network network = 1;
}

message ListNetworksRequest {
    int64 page_number = 1;
    int64 page_size = 2;
}

message ListNetworksResponse {
    repeated proto.common.network.v1.Network networks = 1;
}

service NetworkService {

    // Retrieves a network
    //    Request Metadata:
    //        - authorization: Bearer token for authentication
    //        - x-fingerprint: The fingerprint of the user
    //        - x-organization-id: The organization id
    //    Response Metadata:
    //        - x-http-code: The HTTP status code that is equivalent to the gRPC status code
    //    Possible gRPC errors:
    //        - FAILED_PRECONDITION -> 9: The x-fingerprint or x-organization-id is missing
    //        - INTERNAL -> 13: The something went wrong in the server side
    //        - NOT_FOUND -> 5: The network does not exist
    rpc GetNetwork(GetNetworkRequest) returns (GetNetworkResponse);
    
    // Lists networks
    //    Request Metadata:
    //        - authorization: Bearer token for authentication
    //        - x-fingerprint: The fingerprint of the user
    //        - x-organization-id: The organization id
    //    Response Metadata:
    //        - x-http-code: The HTTP status code that is equivalent to the gRPC status code
    //    Possible gRPC errors:
    //        - FAILED_PRECONDITION -> 9: The x-fingerprint or x-organization-id is missing
    //        - INTERNAL -> 13: The something went wrong in the server side
    rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse);
}