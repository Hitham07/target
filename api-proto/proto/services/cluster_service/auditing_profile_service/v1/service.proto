syntax = "proto3";

package proto.services.auditing_profile_service.v1;

import "proto/common/auditing_profile/v1/auditing_profile.proto";

message GetAuditingProfileRequest {
    string auditing_profile_id = 1;
}

message GetAuditingProfileResponse {
    proto.common.auditing_profile.v1.AuditingProfile auditing_profile = 1;
}

message ListAuditingProfilesRequest {
    int64 page_number = 1;
    int64 page_size = 2;
}

message ListAuditingProfilesResponse {
    repeated proto.common.auditing_profile.v1.AuditingProfile auditing_profiles = 1;
}

service AuditingProfileService {

    // Retrieves a auditing profile
    //    Request Metadata:
    //        - authorization: Bearer token for authentication
    //        - x-fingerprint: The fingerprint of the user
    //        - x-organization-id: The organization id
    //    Response Metadata:
    //        - x-http-code: The HTTP status code that is equivalent to the gRPC status code
    //    Possible gRPC errors:
    //        - FAILED_PRECONDITION -> 9: The x-fingerprint or x-organization-id is missing
    //        - INTERNAL -> 13: The something went wrong in the server side
    //        - NOT_FOUND -> 5: The auditing profile does not exist
    rpc GetAuditingProfile(GetAuditingProfileRequest) returns (GetAuditingProfileResponse);
    
    // Lists auditing profiles
    //    Request Metadata:
    //        - authorization: Bearer token for authentication
    //        - x-fingerprint: The fingerprint of the user
    //        - x-organization-id: The organization id
    //    Response Metadata:
    //        - x-http-code: The HTTP status code that is equivalent to the gRPC status code
    //    Possible gRPC errors:
    //        - FAILED_PRECONDITION -> 9: The x-fingerprint or x-organization-id is missing
    //        - INTERNAL -> 13: The something went wrong in the server side
    rpc ListAuditingProfiles(ListAuditingProfilesRequest) returns (ListAuditingProfilesResponse);
}